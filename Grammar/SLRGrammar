Code
Code = DeclFuncOpt Code | DeclFuncOpt

DeclFuncOpt = 'entryPoint' DeclFunc | DeclFunc
DeclFunc = 'function' 'id' 'opParen' 'clParen' 'isType' Type Body | 'function' 'id' 'opParen' DeclVars 'clParen' 'isType' Type Body | 'function' 'id' 'opParen' 'clParen' Body | 'function' 'id' 'opParen' DeclVars 'clParen' Body

DeclVars = IdsList 'isType' Type 'comma' DeclVars | IdsList 'isType' Type
ParamList = Value 'comma' ParamList | Value

IdsList = 'id' 'comma' IdsList | 'id'

Literal = 'bool' | 'int' | 'real' | 'scynot' | 'char' | 'string'
Value = Literal | FuncCall | Array | 'id'

Type = 'typeBool' | 'typeInt' | 'typeReal' | 'typeChar' | 'typeString' | TypeArray
TypeArray = 'typeArray' 'opBrackets' 'clBrackets' 'of' Type | 'typeArray' 'opBrackets' Expr 'clBrackets' 'of' Type
Array = 'id' ArrayPos
ArrayPos = 'opBrackets' Expr 'clBrackets' ArrayPos | 'opBrackets' Expr 'clBrackets'

Body = 'opBraces' Statements 'clBraces' | 'opBraces' 'clBraces'

Statements = Statement Statements | Statement | 'returnFun' Expr | 'returnFun'
Statement = FuncCall | If | Loop | DeclVars | Attrib

Attrib = LeftAttrib 'attrib' Expr
LeftAttrib = 'id' | Array

If = 'ifSel' 'opParen' Expr 'clParen' Body | 'ifSel' 'opParen' Expr 'clParen' Body ElIfAux
ElIfAux = 'elseSel' Body | 'elifSel' ElIf
ElIf = Body ElIfAux | Body

Expr = Expr 'relational' ExprOr | ExprOr
ExprOr = ExprOr 'logicOr' ExprAnd | ExprAnd
ExprAnd = ExprAnd 'logicAnd' ExprAdd | ExprAdd
ExprAdd = ExprAdd 'plus' ExprMult | ExprAdd 'minus' ExprMult | ExprMult
ExprMult = ExprMult 'mult' ExprPow | ExprPow
ExprPow = ExprPow 'exp' ExprFac | ExprFac
ExprFac = Value | 'opParen' Expr 'clParen'

FuncCall = 'id' 'opParen' ParamList 'clParen'
Loop = 'repeat' 'whileLoop' 'opParen' Expr 'clParen' Body | 'repeat' 'opParen' 'id' 'attrib' Expr 'to' Expr 'clParen' Body
