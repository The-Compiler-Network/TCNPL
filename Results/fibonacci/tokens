        [0001, 0001] (0024,   function) {function}
        [0001, 0010] (0000,         id) {fibonacci}
        [0001, 0019] (0022,    opParen) {(}
        [0001, 0020] (0000,         id) {limit}
        [0001, 0026] (0008,     isType) {is}
        [0001, 0029] (0002,    typeInt) {int}
        [0001, 0032] (0023,    clParen) {)}
        [0001, 0034] (0027,   opBraces) {{}
        [0002, 0009] (0019,      ifSel) {if}
        [0002, 0012] (0022,    opParen) {(}
        [0002, 0013] (0000,         id) {limit}
        [0002, 0019] (0037, relational) {<}
        [0002, 0021] (0011,        int) {0}
        [0002, 0022] (0023,    clParen) {)}
        [0002, 0024] (0027,   opBraces) {{}
        [0003, 0017] (0025,  returnFun) {return}
        [0004, 0009] (0028,   clBraces) {}}
        [0005, 0009] (0000,         id) {a}
        [0005, 0010] (0045,      comma) {,}
        [0005, 0012] (0000,         id) {b}
        [0005, 0013] (0045,      comma) {,}
        [0005, 0015] (0000,         id) {aux}
        [0005, 0019] (0008,     isType) {is}
        [0005, 0022] (0002,    typeInt) {int}
        [0006, 0009] (0000,         id) {a}
        [0006, 0011] (0044,     attrib) {=}
        [0006, 0013] (0011,        int) {0}
        [0007, 0009] (0000,         id) {b}
        [0007, 0011] (0044,     attrib) {=}
        [0007, 0013] (0011,        int) {1}
        [0008, 0009] (0000,         id) {textOut}
        [0008, 0016] (0022,    opParen) {(}
        [0008, 0017] (0000,         id) {format}
        [0008, 0023] (0022,    opParen) {(}
        [0008, 0024] (0014,     string) {%int}
        [0008, 0030] (0045,      comma) {,}
        [0008, 0032] (0000,         id) {a}
        [0008, 0033] (0023,    clParen) {)}
        [0008, 0034] (0023,    clParen) {)}
        [0009, 0009] (0015,     repeat) {repeat}
        [0009, 0016] (0016,  whileLoop) {while}
        [0009, 0022] (0022,    opParen) {(}
        [0009, 0023] (0000,         id) {a}
        [0009, 0025] (0037, relational) {<=}
        [0009, 0028] (0000,         id) {limit}
        [0009, 0033] (0023,    clParen) {)}
        [0009, 0035] (0027,   opBraces) {{}
        [0010, 0017] (0000,         id) {aux}
        [0010, 0021] (0044,     attrib) {=}
        [0010, 0023] (0000,         id) {a}
        [0011, 0017] (0000,         id) {a}
        [0011, 0019] (0044,     attrib) {=}
        [0011, 0021] (0000,         id) {b}
        [0012, 0017] (0000,         id) {b}
        [0012, 0019] (0044,     attrib) {=}
        [0012, 0021] (0000,         id) {aux}
        [0012, 0025] (0034,       plus) {+}
        [0012, 0027] (0000,         id) {b}
        [0013, 0017] (0019,      ifSel) {if}
        [0013, 0020] (0022,    opParen) {(}
        [0013, 0021] (0000,         id) {a}
        [0013, 0023] (0037, relational) {<=}
        [0013, 0026] (0000,         id) {limit}
        [0013, 0031] (0023,    clParen) {)}
        [0013, 0033] (0027,   opBraces) {{}
        [0014, 0025] (0000,         id) {textOut}
        [0014, 0032] (0022,    opParen) {(}
        [0014, 0033] (0000,         id) {format}
        [0014, 0039] (0022,    opParen) {(}
        [0014, 0040] (0014,     string) {, %int}
        [0014, 0048] (0045,      comma) {,}
        [0014, 0050] (0000,         id) {a}
        [0014, 0051] (0023,    clParen) {)}
        [0014, 0052] (0023,    clParen) {)}
        [0015, 0017] (0028,   clBraces) {}}
        [0016, 0009] (0028,   clBraces) {}}
        [0017, 0001] (0028,   clBraces) {}}
        [0019, 0001] (0026, entryPoint) {@isEntryPoint}
        [0020, 0001] (0024,   function) {function}
        [0020, 0010] (0000,         id) {main}
        [0020, 0014] (0022,    opParen) {(}
        [0020, 0015] (0023,    clParen) {)}
        [0020, 0017] (0008,     isType) {is}
        [0020, 0020] (0002,    typeInt) {int}
        [0020, 0024] (0027,   opBraces) {{}
        [0021, 0009] (0000,         id) {limit}
        [0021, 0015] (0008,     isType) {is}
        [0021, 0018] (0002,    typeInt) {int}
        [0022, 0009] (0000,         id) {in}
        [0022, 0011] (0022,    opParen) {(}
        [0022, 0012] (0014,     string) {%int}
        [0022, 0018] (0045,      comma) {,}
        [0022, 0020] (0000,         id) {limit}
        [0022, 0025] (0023,    clParen) {)}
        [0023, 0009] (0000,         id) {fibonacci}
        [0023, 0018] (0022,    opParen) {(}
        [0023, 0019] (0000,         id) {limit}
        [0023, 0024] (0023,    clParen) {)}
        [0024, 0009] (0025,  returnFun) {return}
        [0024, 0016] (0011,        int) {0}
        [0025, 0001] (0028,   clBraces) {}}
