function fibonacci(limit is int) {
        [0001, 0001] (0025,   function) {function}
        [0001, 0010] (0000,         id) {fibonacci}
        [0001, 0019] (0023,    opParen) {(}
        [0001, 0020] (0000,         id) {limit}
        [0001, 0026] (0008,     isType) {is}
        [0001, 0029] (0002,    typeInt) {int}
        [0001, 0032] (0024,    clParen) {)}
        [0001, 0034] (0028,   opBraces) {{}
	if (limit < 0) {
        [0002, 0005] (0020,      ifSel) {if}
        [0002, 0008] (0023,    opParen) {(}
        [0002, 0009] (0000,         id) {limit}
        [0002, 0015] (0038, relational) {<}
        [0002, 0017] (0011,        int) {0}
        [0002, 0018] (0024,    clParen) {)}
        [0002, 0020] (0028,   opBraces) {{}
		return
        [0003, 0009] (0026,  returnFun) {return}
	}
        [0004, 0005] (0029,   clBraces) {}}
	a, b, aux is int
        [0005, 0005] (0000,         id) {a}
        [0005, 0006] (0045,      comma) {,}
        [0005, 0008] (0000,         id) {b}
        [0005, 0009] (0045,      comma) {,}
        [0005, 0011] (0000,         id) {aux}
        [0005, 0015] (0008,     isType) {is}
        [0005, 0018] (0002,    typeInt) {int}
	a = 0
        [0006, 0005] (0000,         id) {a}
        [0006, 0007] (0044,     attrib) {=}
        [0006, 0009] (0011,        int) {0}
	b = 1
        [0007, 0005] (0000,         id) {b}
        [0007, 0007] (0044,     attrib) {=}
        [0007, 0009] (0011,        int) {1}
	textOut(format("%int", a))
        [0008, 0005] (0000,         id) {textOut}
        [0008, 0012] (0023,    opParen) {(}
        [0008, 0013] (0000,         id) {format}
        [0008, 0019] (0023,    opParen) {(}
        [0008, 0020] (0015,     string) {%int}
        [0008, 0026] (0045,      comma) {,}
        [0008, 0028] (0000,         id) {a}
        [0008, 0029] (0024,    clParen) {)}
        [0008, 0030] (0024,    clParen) {)}
	repeat while (a <= limit) {
        [0009, 0005] (0000,         id) {repeat}
        [0009, 0012] (0017,  whileLoop) {while}
        [0009, 0018] (0023,    opParen) {(}
        [0009, 0019] (0000,         id) {a}
        [0009, 0021] (0038, relational) {<=}
        [0009, 0024] (0000,         id) {limit}
        [0009, 0029] (0024,    clParen) {)}
        [0009, 0031] (0028,   opBraces) {{}
		aux = a
        [0010, 0009] (0000,         id) {aux}
        [0010, 0013] (0044,     attrib) {=}
        [0010, 0015] (0000,         id) {a}
		a = b
        [0011, 0009] (0000,         id) {a}
        [0011, 0011] (0044,     attrib) {=}
        [0011, 0013] (0000,         id) {b}
		b = aux + b
        [0012, 0009] (0000,         id) {b}
        [0012, 0011] (0044,     attrib) {=}
        [0012, 0013] (0000,         id) {aux}
        [0012, 0017] (0035,       plus) {+}
        [0012, 0019] (0000,         id) {b}
		if (a <= limit) {
        [0013, 0009] (0020,      ifSel) {if}
        [0013, 0012] (0023,    opParen) {(}
        [0013, 0013] (0000,         id) {a}
        [0013, 0015] (0038, relational) {<=}
        [0013, 0018] (0000,         id) {limit}
        [0013, 0023] (0024,    clParen) {)}
        [0013, 0025] (0028,   opBraces) {{}
			textOut(format(", %int", a))
        [0014, 0013] (0000,         id) {textOut}
        [0014, 0020] (0023,    opParen) {(}
        [0014, 0021] (0000,         id) {format}
        [0014, 0027] (0023,    opParen) {(}
        [0014, 0028] (0015,     string) {, %int}
        [0014, 0036] (0045,      comma) {,}
        [0014, 0038] (0000,         id) {a}
        [0014, 0039] (0024,    clParen) {)}
        [0014, 0040] (0024,    clParen) {)}
		}
        [0015, 0009] (0029,   clBraces) {}}
	}
        [0016, 0005] (0029,   clBraces) {}}
}
        [0017, 0001] (0029,   clBraces) {}}